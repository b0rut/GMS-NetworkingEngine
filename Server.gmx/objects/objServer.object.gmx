<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting up server 

var Type = network_socket_tcp;
var Port = 13374;
var Max_players = 100;

server_init(Type, Port, Max_players);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Networking code part
var EventType = ds_map_find_value(async_load, "type"); //checks event type

switch(EventType) {

    case network_type_connect: //When new client connects
    
        var Socket = ds_map_find_value(async_load, "socket"); //Finds the connecting socket
        var IpAddress = ds_map_find_value(async_load, "ip"); //Finds the ip address of connecting socket
        
        client_create(Socket, IpAddress); //Creates a new clients database
    
    break;
    
    case network_type_disconnect: //When client disconnects
        var Socket = ds_map_find_value(async_load, "socket"); //Check for the disconnecting socket
        var playerName = client_find_info(Socket, "name");
        //First of all we need to check whether or not the player was in the room and inform other players about that
        if(client_in_session(Socket)) {
        session_disconnect(Socket);
        }
        
        client_destroy(Socket); //Destroy the client socket
        break;
    
    case network_type_data: 
    
    var Buffer = ds_map_find_value(async_load, "buffer");
    var Socket = ds_map_find_value(async_load, "id");
    
    buffer_seek(Buffer, buffer_seek_start, 0); //searches the buffer
    
    var MessageID = buffer_read(buffer, buffer_u8); //Reading an id of the message, so we can organize packets
    
    switch(MessageID) { //Now we check for each packet
    
        case 0:
        
        break;
        
        }

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
